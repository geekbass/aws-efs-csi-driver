# Default values for aws-efs-csi-driver.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2
image:
  repository: amazon/aws-efs-csi-driver
  tag: "v1.0.0"
  pullPolicy: IfNotPresent
sidecars:
  livenessProbeImage:
    repository: quay.io/k8scsi/livenessprobe
    tag: "v2.0.0"
  nodeDriverRegistrarImage:
    repository: quay.io/k8scsi/csi-node-driver-registrar
    tag: "v1.3.0"
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
nodeSelector: {}
tolerations: []
affinity: {}
node:
  podAnnotations: {}
  tolerations: []
logLevel: 5
hostAliases: {}
  # for cross VPC EFS, you need to poison or overwrite the DNS for the efs volume as per
  # https://docs.aws.amazon.com/efs/latest/ug/efs-different-vpc.html#wt6-efs-utils-step3
  # implementing the suggested solution found here:
  # https://github.com/kubernetes-sigs/aws-efs-csi-driver/issues/240#issuecomment-676849346
  # EFS Vol ID, IP, Region
  # "fs-01234567":
  #   ip: 10.10.2.2
  #   region: us-east-2
dnsPolicy: ""
dnsConfig: {}
  # Example config which uses the AWS nameservers
  # dnsPolicy: "None"
  # dnsConfig:
  #   nameservers:
  #     - 169.254.169.253

# Optional: You may use the values below *IF* you have already created an EFS for use and you know
# its filesystemId. As mentioned, the efs-csi-driver does not take care of creating the EFS at
# this time. Use the below to create PVs, PVCs and/or storageclass at the time of deploying the
# efs-csi-driver to you cluster so your services may immediately take advantage of use.
peristentVolumes: {}
  # If you would like to have PVs created ahead of time for your services to use. As mentinoned
  # this requires that the EFS be created prior to this. Be aware that some charts may already. 
  # Only accessMode being used at the moment is ReadWriteMany as this is the most often reason
  # for using EFS. See below for how to create multiple PVs.
  # pv1:
  #   annotations:
  #     foo: bar
  #     provisioned-by: efs-csi-driver
  #   storageCapacity: 5Gi
  #   storageClass: efs-storageclass
  #   pvReclaimPolicy: Delete
  #   fileSystemId: fs-blahblah
  # pv2:
  #   storageCapacity: 10Gi
  #   storageClass: efs-sc
  #   fileSystemId: fs-woohoo
persistentVolumeClaims: {}
  # Creating Claims for the above PVs. Keep in mind that some charts will take care of this for you
  # so only use this if you need Claims created.
  # pvc1:
  #   namespace: superduper
  #   annotations: 
  #     foo: bar
  #     provisioned-by: efs-csi-driver
  #   labels:
  #     app: foo
  #     release: bar
  #   storageClass: efs-sc
  #   storageCapacity: 5Gi
  # pvc2:
  #   namespace: default
  #   labels:
  #     app: bar
  #     release: foo
  #   storageClass: efs-storageclass
  #   storageCapacity: 10Gi
storageClass: {}
  # Define the name of the storageClass to be created with the efs csi driver. Default is efs-sc.
  # enabled: false
  # name: efs-storageclass
  # annotations:
  #   provisioned-by: efs-csi-driver
  # labels:
  #   foo: bar
  #   bar: foo

